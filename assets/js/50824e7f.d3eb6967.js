"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[441],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=p(n),m=i,h=d["".concat(s,".").concat(m)]||d[m]||u[m]||r;return n?a.createElement(h,l(l({ref:t},c),{},{components:n})):a.createElement(h,l({ref:t},c))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:i,l[1]=o;for(var p=2;p<r;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7212:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return c},default:function(){return d}});var a=n(7462),i=n(3366),r=(n(7294),n(3905)),l=["components"],o={},s="Introduction",p={unversionedId:"snake/intro",id:"snake/intro",isDocsHomePage:!1,title:"Introduction",description:"Structure",source:"@site/docs/snake/intro.md",sourceDirName:"snake",slug:"/snake/intro",permalink:"/snake-workshop/docs/snake/intro",editUrl:"https://github.com/scalacenter/snake-workshop/edit/website/website/docs/snake/intro.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Node.js",permalink:"/snake-workshop/docs/installation/windows/nodejs"}},c=[{value:"Structure",id:"structure",children:[],level:2},{value:"How to compile and run",id:"how-to-compile-and-run",children:[],level:2},{value:"Logic overview",id:"logic-overview",children:[{value:"The grid",id:"the-grid",children:[],level:3},{value:"Fruit",id:"fruit",children:[],level:3},{value:"Snake",id:"snake",children:[],level:3},{value:"List",id:"list",children:[],level:3},{value:"More about Scala",id:"more-about-scala",children:[],level:3}],level:2}],u={toc:c};function d(e){var t=e.components,o=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,a.Z)({},u,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"introduction"},"Introduction"),(0,r.kt)("h2",{id:"structure"},"Structure"),(0,r.kt)("p",null,"The code is written in three files:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"src/main/scala/Snake.scala"),": logic of the game, you will work on this file"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"src/main/scala/Launcher.scala"),": logic to start the game. This file is provided"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"src/main/scala/Draw.scala"),": logic to draw the terrain and snake on the screen. This file is provided"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"index.html"),": the web page that contains the game. Open this file in Firefox/Chrome/Safari to play")),(0,r.kt)("h2",{id:"how-to-compile-and-run"},"How to compile and run"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Start a ",(0,r.kt)("inlineCode",{parentName:"li"},"sbt")," shell. "),(0,r.kt)("li",{parentName:"ol"},"To run the game, execute the task ",(0,r.kt)("inlineCode",{parentName:"li"},"fastLinkJS"),". This will compile the Scala code into a Javascript file which you can find in ",(0,r.kt)("inlineCode",{parentName:"li"},"target/scala-3.0.2/snake-fastopt/main.js"),"."),(0,r.kt)("li",{parentName:"ol"},"Open ",(0,r.kt)("inlineCode",{parentName:"li"},"index.html")," in your browser of choice, this file loads the Javascript produced in the previous step and runs it.")),(0,r.kt)("h2",{id:"logic-overview"},"Logic overview"),(0,r.kt)("p",null,"The state of the game at any given time is represented by the ",(0,r.kt)("inlineCode",{parentName:"p"},"World")," class"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"case class World(snake: Snake, fruit: Fruit, height: Int, width: Int)\n")),(0,r.kt)("p",null,"in other words, each object of type ",(0,r.kt)("inlineCode",{parentName:"p"},"World")," is a photograph of the state of the game. It contains a snake, a fruit, and it has a height and a width."),(0,r.kt)("p",null,"The goal of this workshop is to implement the ",(0,r.kt)("inlineCode",{parentName:"p"},"nextWorld")," function which, provided the previous state of the game and the action of the player,\nreturns the next state of the world."),(0,r.kt)("p",null,"The code in ",(0,r.kt)("inlineCode",{parentName:"p"},"Launcher.scala")," creates a fresh world and every 250 milliseconds calls ",(0,r.kt)("inlineCode",{parentName:"p"},"nextWorld"),"."),(0,r.kt)("h3",{id:"the-grid"},"The grid"),(0,r.kt)("p",null,"The game can be represented as a table, or grid. Each element of the grid can be empty, occupied by a fruit or by a node of the snake.\nThe dimensions of the grid are specified in the ",(0,r.kt)("inlineCode",{parentName:"p"},"World")," case class:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"height")," is the number of rows of the grid. We will use of the convention of naming ",(0,r.kt)("inlineCode",{parentName:"li"},"y")," the variables indicating vertical position"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"width")," is the number of columns of the grid. We will use of the convention of naming ",(0,r.kt)("inlineCode",{parentName:"li"},"x")," the variables indicating horizontal position"),(0,r.kt)("li",{parentName:"ul"},"The top left corner of the grid has position ",(0,r.kt)("inlineCode",{parentName:"li"},"(x=0, y=0)")),(0,r.kt)("li",{parentName:"ul"},"The top right corner of the grid has position ",(0,r.kt)("inlineCode",{parentName:"li"},"(x=width-1, y=0)")),(0,r.kt)("li",{parentName:"ul"},"The bottom left corner of the grid has position ",(0,r.kt)("inlineCode",{parentName:"li"},"(x=0, y=height-1)")),(0,r.kt)("li",{parentName:"ul"},"The bottom right corner of the grid has position ",(0,r.kt)("inlineCode",{parentName:"li"},"(x=width-1, y=height-1)"))),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"the grid",src:n(2842).Z})),(0,r.kt)("h3",{id:"fruit"},"Fruit"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"case class Fruit(x: Int, y: Int)\n")),(0,r.kt)("p",null,"A fruit occupies a slot in the grid."),(0,r.kt)("p",null,"You can create a fruit like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"val fruit = Fruit(1, 2)\n")),(0,r.kt)("p",null,"or create a fruit with random position"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"val fruit = Fruit.createRandom(maxX, maxY)\n")),(0,r.kt)("p",null,"where you can replace ",(0,r.kt)("inlineCode",{parentName:"p"},"maxX")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"maxY")," with largest values that make ",(0,r.kt)("inlineCode",{parentName:"p"},"x")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"y")," can have."),(0,r.kt)("p",null,"If you have a fruit, you can read its ",(0,r.kt)("inlineCode",{parentName:"p"},"x")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"y")," attributes using ",(0,r.kt)("inlineCode",{parentName:"p"},"fruit.x")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"fruit.y"),"."),(0,r.kt)("h3",{id:"snake"},"Snake"),(0,r.kt)("p",null,"A snake is made up of blocks, or nodes. Each node has an ",(0,r.kt)("inlineCode",{parentName:"p"},"x")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"y")," coordinates.\nAll of the nodes of a snake are collected into a list.\nThe snake also contains the direction in which it is moving."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Direction")," is an ",(0,r.kt)("inlineCode",{parentName:"p"},"enum"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"enum Direction:\n  case Up, Down, Left, Right\n")),(0,r.kt)("p",null,"This means that any ",(0,r.kt)("inlineCode",{parentName:"p"},"Direction")," can take only one of the values ",(0,r.kt)("inlineCode",{parentName:"p"},"Up"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Down"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Left")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"Right"),"."),(0,r.kt)("p",null,"The only way to create a ",(0,r.kt)("inlineCode",{parentName:"p"},"Direction")," is to access one of the cases:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"val right = Direction.Right\n")),(0,r.kt)("h3",{id:"list"},"List"),(0,r.kt)("p",null,"A list is a sequence of values. ",(0,r.kt)("inlineCode",{parentName:"p"},"List[Node]")," means that all the elements of the list are a ",(0,r.kt)("inlineCode",{parentName:"p"},"Node"),".\nHere are a few useful operations on lists:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"You can obtain the length of the list with ",(0,r.kt)("inlineCode",{parentName:"li"},".length"),": ")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"List(1, 2, 3).length // res0: Int = 3\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"You can extract the first element of the list with ",(0,r.kt)("inlineCode",{parentName:"li"},".head"),":")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"List(1, 2, 3).head // res0: Int = 1\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"You can obtain a list without the first element with ",(0,r.kt)("inlineCode",{parentName:"li"},".tail"),":")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"List(1, 2, 3).tail // res0: List[Int] = List(2, 3)\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"You can add a new element to the beginning a list with ",(0,r.kt)("inlineCode",{parentName:"li"},"::"),":")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"0 :: List(1, 2, 3) // res0: List[Int] = List(0, 1, 2, 3)\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"You can obtain a list without the last ",(0,r.kt)("em",{parentName:"li"},"n")," elements with ",(0,r.kt)("inlineCode",{parentName:"li"},".dropRight"),":")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"List(1, 2, 3).dropRight(2) // res0: List[Int] = List(1)\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"You can obtain a list without the first ",(0,r.kt)("em",{parentName:"li"},"n")," elements with ",(0,r.kt)("inlineCode",{parentName:"li"},".drop"),":")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"List(1, 2, 3).drop(2) // res0: List[Int] = List(3)\n")),(0,r.kt)("h3",{id:"more-about-scala"},"More about Scala"),(0,r.kt)("p",null,"In Scala you can assign values to names using ",(0,r.kt)("inlineCode",{parentName:"p"},"val"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"val aNumber = 3\n")),(0,r.kt)("p",null,"Optionally, you can explicitly assign a type to the val:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"val aNumber: Int = 3\n")),(0,r.kt)("p",null,"Functions can be defined with ",(0,r.kt)("inlineCode",{parentName:"p"},"def"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"def functionName(argument: TypeOfARgument): TypeOfReturn =\n  body\n")),(0,r.kt)("p",null,"for example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"def sum(a: Int, b: Int): Int =\n  a + b\n")),(0,r.kt)("p",null,"If expressions are similar to other languages"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'def evenTest(x: Int): String =\n  if x % 2 == 0 then "x is even"\n  else "x is odd"\n')),(0,r.kt)("p",null,"To test multiple conditions you can chain conditions with ",(0,r.kt)("inlineCode",{parentName:"p"},"else if"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'def binary(x: Int): String =\n  if x == 0 then "I know 0!"\n  else if x == 1 then "I know 1!"\n  else "What is this?"\n')),(0,r.kt)("p",null,"Finally, Scala supports pattern matching. This feature accepts many syntaxes but for this workshop we will use it only on simple enums."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'def directionToString(direction: Direction): String =\n  direction match\n    case Direction.Up => "You chose Up"\n    case Direction.Down => "You chose Down"\n    case Direction.Right => "You chose Right"\n    case Direction.Left => "You chose Left"\n')),(0,r.kt)("p",null,"After ",(0,r.kt)("inlineCode",{parentName:"p"},"List"),", another common type in Scala is ",(0,r.kt)("inlineCode",{parentName:"p"},"Option[T]")," which is used to express that a ",(0,r.kt)("inlineCode",{parentName:"p"},"T")," might not be provided.\nFor example in ",(0,r.kt)("inlineCode",{parentName:"p"},"Snake.scala"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"onTick")," is called periodically to advance the game.\nDuring that time the user might have pressed a button or not.\nYou can use pattern matching to process ",(0,r.kt)("inlineCode",{parentName:"p"},"Option"),"s:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"input match\n  case Some(UserInput.Pause) => // user pressed pause\n  case Some(UserInput.Reset) => // user pressed Reset\n  case Some(UserInput.Arrow(direction)) => // user pressed arrow key pointing towards direction\n  case None => // User did not press any key\n")))}d.isMDXComponent=!0},2842:function(e,t,n){t.Z=n.p+"assets/images/grid-6a95aca42b5b9c59856f2030be90fb1e.png"}}]);