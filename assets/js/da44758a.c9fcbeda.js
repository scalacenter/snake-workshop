"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[485],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return d}});var a=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var o=a.createContext({}),c=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(o.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,i=e.originalType,o=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=c(n),d=l,k=m["".concat(o,".").concat(d)]||m[d]||u[d]||i;return n?a.createElement(k,r(r({ref:t},p),{},{components:n})):a.createElement(k,r({ref:t},p))}));function d(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var i=n.length,r=new Array(i);r[0]=m;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:l,r[1]=s;for(var c=2;c<i;c++)r[c]=n[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9088:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return o},metadata:function(){return c},toc:function(){return p},default:function(){return m}});var a=n(7462),l=n(3366),i=(n(7294),n(3905)),r=["components"],s={},o="Introduction to Scala",c={unversionedId:"snake/scala-basics",id:"snake/scala-basics",isDocsHomePage:!1,title:"Introduction to Scala",description:"This page provides an overview of the Scala language features required to complete",source:"@site/docs/snake/scala-basics.md",sourceDirName:"snake",slug:"/snake/scala-basics",permalink:"/snake-workshop/docs/snake/scala-basics",editUrl:"https://github.com/scalacenter/snake-workshop/edit/website/website/docs/snake/scala-basics.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Project setup",permalink:"/snake-workshop/docs/snake/setup"},next:{title:"Workshop instructions",permalink:"/snake-workshop/docs/snake/step-by-step"}},p=[{value:"Values",id:"values",children:[],level:2},{value:"Definitions",id:"definitions",children:[],level:2},{value:"Case classes",id:"case-classes",children:[],level:2},{value:"Enums",id:"enums",children:[],level:2},{value:"List",id:"list",children:[],level:2},{value:"If expressions",id:"if-expressions",children:[],level:2},{value:"Pattern matching",id:"pattern-matching",children:[],level:2}],u={toc:p};function m(e){var t=e.components,n=(0,l.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"introduction-to-scala"},"Introduction to Scala"),(0,i.kt)("p",null,"This page provides an overview of the Scala language features required to complete\nthe workshop."),(0,i.kt)("h2",{id:"values"},"Values"),(0,i.kt)("p",null,"In Scala you can assign values to names using ",(0,i.kt)("inlineCode",{parentName:"p"},"val"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"val aNumber = 3\n")),(0,i.kt)("p",null,"Optionally, you can explicitly assign a type to the val:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"val aNumber: Int = 3\n")),(0,i.kt)("p",null,"Scala is a statically typed language: every valu has a type. Types help us to\ndetect mistakes early, during compilation, rather than later, when the program\nis used. When we do not specify the type for a ",(0,i.kt)("inlineCode",{parentName:"p"},"val")," Scala ",(0,i.kt)("em",{parentName:"p"},"guesses"),", or infers,\nan appropriate type"),(0,i.kt)("h2",{id:"definitions"},"Definitions"),(0,i.kt)("p",null,"Functions can be defined with ",(0,i.kt)("inlineCode",{parentName:"p"},"def"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"def functionName(argument: TypeOfArgument): TypeOfReturn =\n  body\n")),(0,i.kt)("p",null,"for example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"def sum(a: Int, b: Int): Int =\n  a + b\n")),(0,i.kt)("h2",{id:"case-classes"},"Case classes"),(0,i.kt)("p",null,"A case class is used to create a new type combining already existing ones.\nFor example ",(0,i.kt)("inlineCode",{parentName:"p"},"Block")," indicates a block in the Snake game and contains the ",(0,i.kt)("inlineCode",{parentName:"p"},"x")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"y"),"\ncoordinates of the block."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"case class Block(x: Int, y: Int)\n")),(0,i.kt)("p",null,"You can create a block like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"val block = Block(1, 2)\n")),(0,i.kt)("p",null,"If you have a block, you can read its ",(0,i.kt)("inlineCode",{parentName:"p"},"x")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"y")," attributes using ",(0,i.kt)("inlineCode",{parentName:"p"},"block.x")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"block.y"),".\nIf you prefer, you can specify the variable name when you create a case class instance:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"val block = Block(x=1, y=2)\n")),(0,i.kt)("h2",{id:"enums"},"Enums"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"enum")," can be used to define a type with a finite set of named values. For example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"enum Direction:\n  case Up, Down, Left, Right\n")),(0,i.kt)("p",null,"This means that any ",(0,i.kt)("inlineCode",{parentName:"p"},"Direction")," can take only one of the values ",(0,i.kt)("inlineCode",{parentName:"p"},"Up"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Down"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Left")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"Right"),"."),(0,i.kt)("p",null,"The only way to create a ",(0,i.kt)("inlineCode",{parentName:"p"},"Direction")," is to access one of the cases:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"val right = Direction.Right\n")),(0,i.kt)("h2",{id:"list"},"List"),(0,i.kt)("p",null,"A list is a sequence of values. ",(0,i.kt)("inlineCode",{parentName:"p"},"List[Block]")," means that all the elements of the list are a ",(0,i.kt)("inlineCode",{parentName:"p"},"Block"),".\nHere are a few useful operations on lists:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"You can obtain the length of the list with ",(0,i.kt)("inlineCode",{parentName:"li"},".length"),": ")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"List(1, 2, 3).length // res0: Int = 3\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"You can extract the first element of the list with ",(0,i.kt)("inlineCode",{parentName:"li"},".head"),":")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"List(1, 2, 3).head // res0: Int = 1\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"You can obtain a list without the first element with ",(0,i.kt)("inlineCode",{parentName:"li"},".tail"),":")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"List(1, 2, 3).tail // res0: List[Int] = List(2, 3)\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"You can add a new element to the beginning a list with ",(0,i.kt)("inlineCode",{parentName:"li"},"::"),":")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"0 :: List(1, 2, 3) // res0: List[Int] = List(0, 1, 2, 3)\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"You can check if a list contains an element with: ",(0,i.kt)("inlineCode",{parentName:"li"},".contains"),":")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"List(1, 2, 3).contains(2) // res0: Boolean = true\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"You can obtain a list without the last ",(0,i.kt)("em",{parentName:"li"},"n")," elements with ",(0,i.kt)("inlineCode",{parentName:"li"},".dropRight"),":")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"List(1, 2, 3).dropRight(2) // res0: List[Int] = List(1)\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"You can obtain a list without the first ",(0,i.kt)("em",{parentName:"li"},"n")," elements with ",(0,i.kt)("inlineCode",{parentName:"li"},".drop"),":")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"List(1, 2, 3).drop(2) // res0: List[Int] = List(3)\n")),(0,i.kt)("h2",{id:"if-expressions"},"If expressions"),(0,i.kt)("p",null,"If expressions are similar to other languages"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'def evenTest(x: Int): String =\n  if x % 2 == 0 then "x is even"\n  else "x is odd"\n')),(0,i.kt)("p",null,"To test multiple conditions you can chain conditions with ",(0,i.kt)("inlineCode",{parentName:"p"},"else if"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'def binary(x: Int): String =\n  if x == 0 then "I know 0!"\n  else if x == 1 then "I know 1!"\n  else "What is this?"\n')),(0,i.kt)("h2",{id:"pattern-matching"},"Pattern matching"),(0,i.kt)("p",null,"Finally, Scala supports pattern matching. This feature accepts many syntaxes but\nfor this workshop we will use only with ",(0,i.kt)("inlineCode",{parentName:"p"},"enum"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Option")," and case classes."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'def directionToString(direction: Direction): String =\n  direction match\n    case Direction.Up => "You chose Up"\n    case Direction.Down => "You chose Down"\n    case Direction.Right => "You chose Right"\n    case Direction.Left => "You chose Left"\n')),(0,i.kt)("p",null,"After ",(0,i.kt)("inlineCode",{parentName:"p"},"List"),", another common type in Scala is ",(0,i.kt)("inlineCode",{parentName:"p"},"Option[T]")," which is used to express that a ",(0,i.kt)("inlineCode",{parentName:"p"},"T")," might not be provided.\nFor example in ",(0,i.kt)("inlineCode",{parentName:"p"},"Snake.scala"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"updateGame")," is called periodically to advance the game.\nDuring that time the user might have pressed a button or not.\nYou can use pattern matching to process ",(0,i.kt)("inlineCode",{parentName:"p"},"Option"),"s:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'def matchOptionExample(maybeNumber: Option[Int]): String\n  maybeNumber match\n    case Some(number) => "I received number " + number\n    case None => "I did not receive any number"\n')))}m.isMDXComponent=!0}}]);